/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package attestlib

import (
	"testing"
)

// These keys and signatures were generated by the following commands:
// `gpg --quick-generate-key --yes pgp@cryptolib.com`
// `gpg --export --armor pgp@cryptolib.com`
// `gpg --output gpgSignature --armor -u pgp@cryptolib.com --sign testPayload`

const testPayload = `This is the payload I wish to sign`

const gpgSignature = `-----BEGIN PGP MESSAGE-----

owEBDQLy/ZANAwAKAYi8MPxE2axfAawzYgtwYXlsb2FkLnR4dF7NmAZUaGlzIGlz
IHRoZSBwYXlsb2FkIEkgd2lzaCB0byBzaWduiQHGBAABCgAwFiEE7hi/drY747K1
ffNmiLww/ETZrF8FAl7NmAYSHHBncEBjcnlwdG9saWIuY29tAAoJEIi8MPxE2axf
wZwL/01qWhDrq1CZJVCYhjG6xEXu4VxqvHmcAlVxxfFKIU66uDfYB0S+yu29cD9y
t75NV3Gd9dstixdiZCtl8vUlxF8Y3aC81Go2jXWQIbXLRJlt4VYAwrXgMusdnxpl
Iyad1mgms6uFDwI+7uaOnqfbpxXz3cz7NnXBATLyUY6rK1XJStZ/FfqDTsPgdw83
JPQRGbD/m988imm82k2OmClG/HLXFmCD9jRezh5tTj5udl1tpS6cEsdhWPItAZac
UpS7u2gz8JdA2eeZdw4P8eDrghujdOqBHAuhSVvooh6p62VAdYSiwHErf8cw4AY3
sigX4LC6mFINIYBFxw/1BiJNim2Ys55ycnVglskzzs6GTutJc7jdqWney43CDUDY
ItQF1XrfsS66QsJisBmQ5Jw5jpHMYTp1SHQ9FnvK+hM5cgQ7743Wl7lfbofUGN5A
cSSad1b92Ch3d+hWkzwil9tDdUA/2clidsHayBX5lnUtiN2/pI/RvLDfzocte/7E
WMTB2g==
=DBat
-----END PGP MESSAGE-----
`

const gpgPublicKey = `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
N0Tk
=8PoI
-----END PGP PUBLIC KEY BLOCK-----
`

const gpgPublicKeyID = "EE18BF76B63BE3B2B57DF36688BC30FC44D9AC5F"

const gpgPrivateKey = `-----BEGIN PGP PRIVATE KEY BLOCK-----

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
KjcvssXVpdQiiRae+2e/hWxfnPdAN0Tk
=HYMC
-----END PGP PRIVATE KEY BLOCK-----
`

func TestVerifyPgp(t *testing.T) {
	tcs := []struct {
		name        string
		signature   []byte
		publicKey   []byte
		expectedErr bool
	}{
		{
			name:        "valid signature and public key",
			signature:   []byte(gpgSignature),
			publicKey:   []byte(gpgPublicKey),
			expectedErr: false,
		},
		{
			name:        "invalid signature",
			signature:   []byte("invalid-sig"),
			publicKey:   []byte(gpgPublicKey),
			expectedErr: true,
		},
		{
			name:        "invalid public key",
			signature:   []byte(gpgSignature),
			publicKey:   []byte("invalid-public-key"),
			expectedErr: true,
		},
	}

	v := pgpVerifierImpl{}
	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			actualPayload, err := v.verifyPgp(tc.signature, tc.publicKey)
			if tc.expectedErr {
				if err == nil {
					t.Fatalf("Expected error, but returned none")
				}
			} else {
				if err != nil {
					t.Fatalf("Unexpected error: %v", err)
				}
				expectedPayload := []byte(testPayload)
				if string(actualPayload) != string(expectedPayload) {
					t.Errorf("Incorrect payload extracted: got: %s, want: %s", string(actualPayload), string(expectedPayload))
				}
			}
		})
	}
}

func TestNewPgpSigner(t *testing.T) {
	tcs := []struct {
		name        string
		privateKey  []byte
		expectedErr bool
	}{
		{
			name:        "valid private key",
			privateKey:  []byte(gpgPrivateKey),
			expectedErr: false,
		},
		{
			name:        "invalid private key",
			privateKey:  []byte("invalid-private-key"),
			expectedErr: true,
		},
	}
	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			_, err := NewPgpSigner(tc.privateKey)
			if tc.expectedErr {
				if err == nil {
					t.Fatalf("Expected error but returned none")
				}
			} else {
				if err != nil {
					t.Fatalf("Unexpected error: %v", err)
				}
			}
		})
	}
}

func TestCreateAttestation(t *testing.T) {
	signer, err := NewPgpSigner([]byte(gpgPrivateKey))
	if err != nil {
		t.Fatalf("Unexpected error creating signer: %v", err)
	}

	att, err := signer.CreateAttestation([]byte(testPayload))
	if err != nil {
		t.Fatalf("Error creating the Attestation: %v", err)
	}

	// Check attestation contents
	if att.SerializedPayload != nil {
		t.Errorf("SerializedPayload does not match expected: got: %v, want: %v", att.SerializedPayload, nil)
	}
	if att.PublicKeyID != gpgPublicKeyID {
		t.Errorf("PublicKeyID does not match expected: got: %q, want %q", att.PublicKeyID, gpgPublicKeyID)
	}
}

// Test CreateAttestation by asserting the created Attestation can be verified.
// We do not compare the created Attestation to a hard-coded expected result
// because the contents of the generated signatures depend on external factors,
// including time and date.
func TestCreateAndVerifyAttestation(t *testing.T) {
	v := pgpVerifierImpl{}
	signer, err := NewPgpSigner([]byte(gpgPrivateKey))
	if err != nil {
		t.Fatalf("Error creating the signer: %v", err)
	}

	att, err := signer.CreateAttestation([]byte(testPayload))
	if err != nil {
		t.Fatalf("Error creating the attestation: %v", err)
	}

	actualPayload, err := v.verifyPgp(att.Signature, []byte(gpgPublicKey))
	if err != nil {
		t.Fatalf("Unexpected error verifying the attestation: %v", err)
	}

	// The payload should not be mangled by `CreateAttestation` method
	if string(actualPayload) != testPayload {
		t.Errorf("Extracted payload does not match expected: got: %q, want: %q", string(actualPayload), testPayload)
	}
}
